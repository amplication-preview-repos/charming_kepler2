/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TicketStatus, // @ts-ignore
  Ticket,
} from "@prisma/client";

export class TicketStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TicketStatusCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusCountArgs>
  ): Promise<number> {
    return this.prisma.ticketStatus.count(args);
  }

  async ticketStatuses<T extends Prisma.TicketStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusFindManyArgs>
  ): Promise<TicketStatus[]> {
    return this.prisma.ticketStatus.findMany(args);
  }
  async ticketStatus<T extends Prisma.TicketStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusFindUniqueArgs>
  ): Promise<TicketStatus | null> {
    return this.prisma.ticketStatus.findUnique(args);
  }
  async createTicketStatus<T extends Prisma.TicketStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusCreateArgs>
  ): Promise<TicketStatus> {
    return this.prisma.ticketStatus.create<T>(args);
  }
  async updateTicketStatus<T extends Prisma.TicketStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusUpdateArgs>
  ): Promise<TicketStatus> {
    return this.prisma.ticketStatus.update<T>(args);
  }
  async deleteTicketStatus<T extends Prisma.TicketStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketStatusDeleteArgs>
  ): Promise<TicketStatus> {
    return this.prisma.ticketStatus.delete(args);
  }

  async getTickets(parentId: string): Promise<Ticket | null> {
    return this.prisma.ticketStatus
      .findUnique({
        where: { id: parentId },
      })
      .tickets();
  }
}

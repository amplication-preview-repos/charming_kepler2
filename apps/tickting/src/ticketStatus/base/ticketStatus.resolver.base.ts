/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TicketStatus } from "./TicketStatus";
import { TicketStatusCountArgs } from "./TicketStatusCountArgs";
import { TicketStatusFindManyArgs } from "./TicketStatusFindManyArgs";
import { TicketStatusFindUniqueArgs } from "./TicketStatusFindUniqueArgs";
import { CreateTicketStatusArgs } from "./CreateTicketStatusArgs";
import { UpdateTicketStatusArgs } from "./UpdateTicketStatusArgs";
import { DeleteTicketStatusArgs } from "./DeleteTicketStatusArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketStatusService } from "../ticketStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TicketStatus)
export class TicketStatusResolverBase {
  constructor(
    protected readonly service: TicketStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "read",
    possession: "any",
  })
  async _ticketStatusesMeta(
    @graphql.Args() args: TicketStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TicketStatus])
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "read",
    possession: "any",
  })
  async ticketStatuses(
    @graphql.Args() args: TicketStatusFindManyArgs
  ): Promise<TicketStatus[]> {
    return this.service.ticketStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TicketStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "read",
    possession: "own",
  })
  async ticketStatus(
    @graphql.Args() args: TicketStatusFindUniqueArgs
  ): Promise<TicketStatus | null> {
    const result = await this.service.ticketStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketStatus)
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "create",
    possession: "any",
  })
  async createTicketStatus(
    @graphql.Args() args: CreateTicketStatusArgs
  ): Promise<TicketStatus> {
    return await this.service.createTicketStatus({
      ...args,
      data: {
        ...args.data,

        tickets: args.data.tickets
          ? {
              connect: args.data.tickets,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketStatus)
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "update",
    possession: "any",
  })
  async updateTicketStatus(
    @graphql.Args() args: UpdateTicketStatusArgs
  ): Promise<TicketStatus | null> {
    try {
      return await this.service.updateTicketStatus({
        ...args,
        data: {
          ...args.data,

          tickets: args.data.tickets
            ? {
                connect: args.data.tickets,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TicketStatus)
  @nestAccessControl.UseRoles({
    resource: "TicketStatus",
    action: "delete",
    possession: "any",
  })
  async deleteTicketStatus(
    @graphql.Args() args: DeleteTicketStatusArgs
  ): Promise<TicketStatus | null> {
    try {
      return await this.service.deleteTicketStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ticket, {
    nullable: true,
    name: "tickets",
  })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async getTickets(
    @graphql.Parent() parent: TicketStatus
  ): Promise<Ticket | null> {
    const result = await this.service.getTickets(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
